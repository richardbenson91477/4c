; comment
-9...9.9...9 - 9...9.9...9
"string constant"
'false
'true
'number
'string 
'boolean
'spc
'nil
'nl
(function args)
[list]
number-var
number-array-var.
boolean-var^
string-var$
:type
:type:instance
:type:instance.var-instance

(def var-name value) -> #nil
(set var-name value) -> #nil
(def-type :type-name [var-list])
(do [arg-list] [fn-list] default-return-value) -> ?
(return value-for-do) -> #nil
(print value) -> #nil
(if (bool function) [true-fn-list] [false-fn-list]) -> ?
(while (bool function) [fn-list] [per-loop fn-list]) -> ?
(+ num num) -> num
(- num num) -> num
(* num num) -> num
(/ num num) -> num
(= num num) -> bool
(!= num num) -> bool
(> num num) -> bool
(< num num) -> bool
(<= num num) -> bool
(>= num num) -> bool
(str-copy target-string-var source-string) -> bool
(str-from number) -> string
(new :type var [extra-args]) -> bool
(del :type var [extra-args]) -> bool
(def :type.new (do [:this extra-param-vars] [alloc/init :this.vars]))
(def :type.del (do [:this extra-param-vars] [dealloc/deinit :this.vars]))

